type: edu
custom_name: Looking good!
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    import java.util.Random;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            int size = sc.nextInt();
            long seed = sc.nextLong();
            int iterations = sc.nextInt();
            Generator generator = new Generator(size, seed, iterations);
            State state = new State(generator.generate());
            state.toConsole();
        }
    }




    class State {
       char[][] gameGrid;


        public State(char[][] gameGrid) {

            this.gameGrid = gameGrid;
        }


        public void
        toConsole() {
            for (int i = 0; i < gameGrid.length; i++) {
                for (int j = 0; j < gameGrid[i].length; j++) {
                    System.out.print(gameGrid[i][j]);
                }
                System.out.println();
            }
        }
    }


    class Generator {

        int universeSize;
        long seed;
        int iterations;


        public Generator(int universeSize, long seed, int iterations) {
            this.universeSize = universeSize;
            this.seed = seed;
            this.iterations = iterations;
        }


        public char[][] generate() {
            return iterateAll(populate(), iterations);

        }
        public char[][] populate() {
            char[][] gameGrid = new char[this.universeSize][this.universeSize];
            Random random = new Random(this.seed);


            for(int i = 0; i < gameGrid.length; i++) {
                for (int j = 0; j<gameGrid[i].length; j++) {


                    if (random.nextBoolean()) {
                        gameGrid[i][j] = 'O';
                    } else {
                        gameGrid[i][j] = ' ';
                    }

                }
            }
            return gameGrid;
        }

        public char[][] iterateAll(char[][] gameGrid, int iterations) {
            for (int i = 0; i < iterations; i++) {
                gameGrid = iterateOne(gameGrid);
            }

            return gameGrid;

        }



        private char[][] iterateOne(char[][] gameGrid) {
            for (int i = 0; i < universeSize; i++) {
                for (int j = 0; j < universeSize; j++) {
                    if (isAlive(gameGrid[i][j])) {
                        if (isBoredOfBeingAlive(gameGrid, i, j)) {
                            gameGrid = kill(gameGrid, i, j);
                        }
                    } else {
                        if (isBoredOfBeingDead(gameGrid, i, j)) {
                            gameGrid = resurrect(gameGrid, i, j);
                        }
                    }
                }
            }
            return gameGrid;
        }

        private boolean isAlive(char cellContent) {
            if (cellContent == 'O') {
                return true;
            } else {
                return false;
            }
        }

        private boolean isBoredOfBeingAlive(char[][] gameGrid, int i, int j) {
            if (aliveNeighbours(gameGrid, i, j) == 2 || aliveNeighbours(gameGrid, i, j) == 3) {
                return false;
            } else {
                return true;
            }
        }

        private boolean isBoredOfBeingDead(char[][] gameGrid, int i, int j) {
            if (aliveNeighbours(gameGrid, i, j) == 3) {
                return false;
            } else {
                return true;
            }
        }

        private char[][] kill(char[][] gameGrid, int i, int j) {
            gameGrid[i][j] = ' ';
            return gameGrid;

        }

        private char[][] resurrect(char[][] gameGrid, int i, int j) {
            gameGrid[i][j] = 'O';
            return gameGrid;

        }

        public int aliveNeighbours(char[][] gameGrid, int i, int j) {
            int count = 0;
            //TODO figure this out
            for (int k = -1; k < 2; k++) { // cols
                for (int l = -1; l < 2; l++) { // rows
                    if (k != 0 && l != 0) {
                        if (i + k < 0) {
                            if (j + l < 0) {
                                if (gameGrid[universeSize - 1][universeSize - 1] == 'O') {
                                    count++;
                                }
                            }
                        } else if (i + k >= 0 && i + k < universeSize && j + l < 0) {
                            if (gameGrid[i+k][universeSize -1] == 'O') {
                                count++;
                            }
                        } else if (i + k >= universeSize) {
                            if (j + l >= universeSize) {
                                if (gameGrid[0][0] == 'O') {
                                    count++;
                                }
                            }

                        } else if (i + k < universeSize && j + l >= universeSize) {
                            if (gameGrid[i+k][0] == 'O') {
                                count++;
                            }

                        }
                        else {
                            if (gameGrid[i+k][j+l] == 'O') {
                                count++;
                            }
                        }
                    }
                }

            }


            return count;
        }


    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage4Test;

    public class GameOfLifeTest extends GameOfLifeStage4Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createPredefinedFeedbackTest(
            feedback: String,
            input: String = "",
            checker: (String) -> Boolean
    ): TestCase<ClueWithChecker> {
        return ClueWithPredefinedFeedbackChecker(
                predefinedFeedback = feedback,
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeCommonTest.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult

    fun checkLabelForInteger(labelRequirements: ComponentRequirements<JLabelFixture>): CheckResult {
        val label = labelRequirements.requireExistingComponent()

        val labelDigits = label.text().trim { !it.isDigit() }

        if (labelDigits.toIntOrNull() == null) {
            return fail("The '${labelRequirements.name}' label doesn't contain an integer.")
        }

        return CheckResult.TRUE
    }
  learner_created: false
- name: test/common/GameOfLifeStage4Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage4Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel) +
                    componentsAreEnabledTests(generationLabel, aliveLabel) +
                    stage4Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage4Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest {
                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/UiTestsGenerators.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("Window is not visible") { frameGetter().isVisible }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
            val name: String,
            val isEnabled: Boolean,
            private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            return createPredefinedFeedbackTest("No suitable component with name '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            val (desiredState, stateChecker) = if (requirements.isEnabled) {
                "enabled" to { requirements.requireExistingComponent().isEnabled }
            } else {
                "disabled" to { !requirements.requireExistingComponent().isEnabled }
            }

            return createPredefinedFeedbackTest("The '${requirements.name}' component should be $desiredState") {
                stateChecker()
            }

        }

        return components.map(::generateIsEnabledTest)
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>>
            ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }
  learner_created: false
- name: src/life/GameOfLife.java
  visible: true
  text: |
    package life;

    import javax.swing.*;

    public class GameOfLife extends JFrame {
        public GameOfLife() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
        }
    }
  learner_created: false
- name: src/life/ApplicationRunner.java
  visible: true
  text: |
    package life;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new GameOfLife();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/54/stages/298/implement#comment
status: Unchecked
record: -1
